[Script Info]
; Script generated by Aegisub 3.1.3
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
Last Style Storage: Default
Aegisub Scroll Position: 352
Aegisub Active Line: 368
Aegisub Video Zoom Percent: 1.000000
PlayResX: 1920
PlayResY: 1080
Audio URI: ../../../Videos/CppCon2015/BjarneStroustrupWritingGoodC++14.mp4
Video File: ../../../Videos/CppCon2015/BjarneStroustrupWritingGoodC++14.mp4
Aegisub Video Aspect Ratio: c1.777778
Aegisub Video Position: 53849

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,55,&H00FF00FF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,3,2,10,10,20,1
Style: 居中标题,文泉驿正黑,150,&H0097108D,&H000000FF,&H00000000,&H00F7A350,0,0,0,0,100,100,0,0,1,3,6,8,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:07.10,居中标题,,0,0,0,,avplayer.org\n社区出品
Comment: 0,0:00:05.00,0:00:07.00,Default,,0,0,0,,视频文件请到 http://pan.baidu.com/s/1pJquXBl 下载，提取码 2in6
Dialogue: 0,0:00:00.00,0:00:02.04,Default,,0,0,0,,Yes, Now we can go
Dialogue: 0,0:00:05.41,0:00:10.45,Default,,0,0,0,,Welcome~\n\nIt's very nice and a little bit scary to see you all again
Dialogue: 0,0:00:10.75,0:00:19.76,Default,,0,0,0,,And especially happy to see a lot of old friends and also a lot of people that are new here
Dialogue: 0,0:00:20.19,0:00:27.90,Default,,0,0,0,,Anyway, I'm going to talk about how to write code
Dialogue: 0,0:00:28.23,0:00:39.16,Default,,0,0,0,,and in particular \n-- a question has been boggle for a while, and I know it has boggle for a lot of new people -- is \n "What is good modern C++" ?
Dialogue: 0,0:00:39.45,0:00:46.18,Default,,0,0,0,,We've done lots to the the languages over the last five years
Dialogue: 0,0:00:46.37,0:00:52.47,Default,,0,0,0,,And lot of people have ideas about what it is to write good c++
Dialogue: 0,0:00:52.74,0:00:55.74,Default,,0,0,0,,and , lots of people ask about it.
Dialogue: 0,0:00:55.74,0:01:04.02,Default,,0,0,0,,so, this spring, I started a project trying to make some guidelines to how to write this
Dialogue: 0,0:01:04.05,0:01:09.46,Default,,0,0,0,,turned out that other people were on the same kind of idea.
Dialogue: 0,0:01:09.61,0:01:13.79,Default,,0,0,0,,so some of us try to provide some useful answer.
Dialogue: 0,0:01:14.04,0:01:22.28,Default,,0,0,0,,and one of the things that is important here, is that we would like to help many people
Dialogue: 0,0:01:22.61,0:01:27.32,Default,,0,0,0,,thers is more that 4million c++ programers.
Dialogue: 0,0:01:27.57,0:01:34.16,Default,,0,0,0,,and if we come up with a solution that can (only) be handled by 200 language experts, we failed.
Dialogue: 0,0:01:34.47,0:01:42.20,Default,,0,0,0,,so , this is an attempt to be able to help a lot of people.
Dialogue: 0,0:01:42.57,0:01:46.56,Default,,0,0,0,,and a lot of we've seen it, we have a great language now.
Dialogue: 0,0:01:46.65,0:01:52.74,Default,,0,0,0,,it's a modern language, it can do really nice things that we couldn't do 10-20 years ago.
Dialogue: 0,0:01:52.79,0:01:59.63,Default,,0,0,0,,c++11 is good. c++14 is better. both are in wide-spread production use.
Dialogue: 0,0:01:59.63,0:02:02.09,Default,,0,0,0,,These are not toy languages.
Dialogue: 0,0:02:02.24,0:02:08.61,Default,,0,0,0,,And from I see in the standards commitee, c++17 is even better.
Dialogue: 0,0:02:08.85,0:02:22.51,Default,,0,0,0,,There is technical specifications like filesystem and concepts and such that are rolling out. Things are happening.
Dialogue: 0,0:02:22.51,0:02:44.95,Default,,0,0,0,,So, I know from experience, from wide experience from industrial experience, that c++1* is easier to write, easier to maintain, runs faster and can express more that older c++ styles with less code
Dialogue: 0,0:02:45.54,0:02:47.11,Default,,0,0,0,,This is a fact
Dialogue: 0,0:02:47.52,0:02:51.40,Default,,0,0,0,,It's also a fact that very few people do it!
Dialogue: 0,0:02:53.67,0:02:57.47,Default,,0,0,0,,Maybe you know a thousand people that write such modern code.
Dialogue: 0,0:02:57.74,0:03:02.86,Default,,0,0,0,,Maybe you know 10 thousand people, but that's only very tiny small fraction of the community.
Dialogue: 0,0:03:02.86,0:03:04.35,Default,,0,0,0,,We have to do something better.
Dialogue: 0,0:03:04.35,0:03:10.78,Default,,0,0,0,,People are writting c++ in really archaic and foreign styles
Dialogue: 0,0:03:11.23,0:03:16.20,Default,,0,0,0,,Also you going to web and you'll see every little so-and-so trying to be language expert.
Dialogue: 0,0:03:16.20,0:03:20.40,Default,,0,0,0,,And discussing the sanitates of rvalue references.
Dialogue: 0,0:03:20.40,0:03:27.65,Default,,0,0,0,,Which does actually matter in most code unless you are writting a high performence library for use of others.
Dialogue: 0,0:03:27.65,0:03:34.68,Default,,0,0,0,,So, they are all trying to be language lawyers and getting lost in technical details.
Dialogue: 0,0:03:35.11,0:03:43.55,Default,,0,0,0,,so basicly idea is "Doctor, docker, it hurts when I hit myself on the head with a hammer". The obvious answer is "so don't do it!"
Dialogue: 0,0:03:43.81,0:03:45.81,Default,,0,0,0,,And that's what we are trying to do.
Dialogue: 0,0:03:46.93,0:03:49.05,Default,,0,0,0,,There is a quote by me --
Dialogue: 0,0:03:52.45,0:03:56.77,Default,,0,0,0,,Within c++ language there is a smaller simplier safer language struggling to get out.
Dialogue: 0,0:03:56.77,0:04:02.50,Default,,0,0,0,,I think I said that in 94, 92... It a long time ago.
Dialogue: 0,0:04:02.75,0:04:05.78,Default,,0,0,0,,it is even more true today that was there.
Dialogue: 0,0:04:05.93,0:04:12.63,Default,,0,0,0,,You can simplify the code\n you can maintain the efficiency\nand we don't limit what you can say.
Dialogue: 0,0:04:12.63,0:04:14.24,Default,,0,0,0,,these are important things.
Dialogue: 0,0:04:14.24,0:04:16.24,Default,,0,0,0,,This is C++!
Dialogue: 0,0:04:16.24,0:04:21.11,Default,,0,0,0,,It's not a so specialize language for a paticular application.
Dialogue: 0,0:04:21.73,0:04:25.34,Default,,0,0,0,,So, lets get it out! lets get it out now!
Dialogue: 0,0:04:25.57,0:04:30.84,Default,,0,0,0,,Lot of people solution to getting things better and simpler it to invent new languages.
Dialogue: 0,0:04:30.84,0:04:32.84,Default,,0,0,0,,but that not now.
Dialogue: 0,0:04:32.84,0:04:42.18,Default,,0,0,0,,If you invent a really good new language now,  large number of people will be able to use it, in 10 years, if you succeed.
Dialogue: 0,0:04:42.36,0:04:48.97,Default,,0,0,0,,The succee rate for new languages especially general purpose programming languages is very close to zero.
Dialogue: 0,0:04:48.97,0:04:50.97,Default,,0,0,0,,so, lets do it now!
Dialogue: 0,0:04:51.20,0:04:53.91,Default,,0,0,0,,And I want to use those compilers.
Dialogue: 0,0:04:53.91,0:04:59.92,Default,,0,0,0,,I mean, have you seen what compilers can do with your code interms of optimizing it?
Dialogue: 0,0:04:59.92,0:05:08.69,Default,,0,0,0,,doesn't matter which compiler you are using for a modern compiler and sort of standard hardware. it's amazing.
Dialogue: 0,0:05:08.90,0:05:15.69,Default,,0,0,0,,I mean, I am not sure what I could have done it if I had 10 years. but they did. this is going on for a long time.
Dialogue: 0,0:05:15.69,0:05:23.70,Default,,0,0,0,,this doesn't just happen for a new language unless you can hijack the c++ code generation phase. which is a fair gain.
Dialogue: 0,0:05:23.94,0:05:32.82,Default,,0,0,0,,So, I'm going to look for coding guidelines, provide guidence to people who wants to write modern c++ what ever that means.
Dialogue: 0,0:05:33.01,0:05:40.04,Default,,0,0,0,,And, I know that just telling people what to do doesn't quite work.
Dialogue: 0,0:05:40.04,0:05:43.04,Default,,0,0,0,,so you need support by tools and libraries.
Dialogue: 0,0:05:43.18,0:05:50.25,Default,,0,0,0,,and again, we want generality, we want performence, we want simple code, and we want portibility.
Dialogue: 0,0:05:50.25,0:05:54.77,Default,,0,0,0,,I dont want to be tight down by paticular hardware, paticular operation system.
Dialogue: 0,0:05:55.05,0:05:56.52,Default,,0,0,0,,those all the gameness.
Dialogue: 0,0:05:56.52,0:06:02.78,Default,,0,0,0,,I think we can do it. And I think we can do it, I know that I can't do it alone.
Dialogue: 0,0:06:02.78,0:06:06.50,Default,,0,0,0,,I know that well that might be a genius somewhere.
Dialogue: 0,0:06:06.50,0:06:08.99,Default,,0,0,0,,But I think I know that no individual can do it.
Dialogue: 0,0:06:09.14,0:06:11.97,Default,,0,0,0,,And, no single company can
Dialogue: 0,0:06:12.11,0:06:17.39,Default,,0,0,0,,It will be cature
Dialogue: 0,0:06:17.39,0:06:19.15,Default,,0,0,0,,and you couldn't trust it all time.
Dialogue: 0,0:06:19.15,0:06:27.14,Default,,0,0,0,,people explained that to me a long time ago to ensure that I took part in the (c++) standardization, so please help.
Dialogue: 0,0:06:27.14,0:06:33.16,Default,,0,0,0,,I'm going to say a little bit about what help we would like and who we are and things like that.
Dialogue: 0,0:06:33.16,0:06:36.05,Default,,0,0,0,,so the initial work started
Dialogue: 0,0:06:36.05,0:06:39.39,Default,,0,0,0,,there was a project out of microsoft by Herb Sutter and friends
Dialogue: 0,0:06:39.39,0:06:42.01,Default,,0,0,0,,I started something at Morgan Stanley
Dialogue: 0,0:06:42.01,0:06:45.98,Default,,0,0,0,,CERN has joined and contributed.
Dialogue: 0,0:06:45.98,0:06:47.98,Default,,0,0,0,,And things are available.
Dialogue: 0,0:06:47.98,0:06:49.98,Default,,0,0,0,,its there.
Dialogue: 0,0:06:49.98,0:06:55.06,Default,,0,0,0,,you can find it on github, give you the urls towards the end.
Dialogue: 0,0:06:55.06,0:06:58.29,Default,,0,0,0,,there is guide lines. a lot of them.
Dialogue: 0,0:06:58.49,0:07:00.64,Default,,0,0,0,,there is little support library.
Dialogue: 0,0:07:00.64,0:07:11.48,Default,,0,0,0,,which is some very simple classes that mostly mapping into standard library stuff if not  map straghtly into portable c++.
Dialogue: 0,0:07:11.48,0:07:16.44,Default,,0,0,0,,portable meaning microsoft, gcc, clang; Windows, Linux, Mac
Dialogue: 0,0:07:16.53,0:07:17.64,Default,,0,0,0,,and mac yeah.
Dialogue: 0,0:07:17.97,0:07:25.52,Default,,0,0,0,,there is analyze tool that will be ship by the guy at microsoft that wrote it next month
Dialogue: 0,0:07:25.53,0:07:38.24,Default,,0,0,0,,and we hope to have port available later. maybe November? I don't know. I mean, you know, software project some time suffer delays.
Dialogue: 0,0:07:38.42,0:07:41.09,Default,,0,0,0,,but we are planning for it.
Dialogue: 0,0:07:43.13,0:07:46.58,Default,,0,0,0,,it exists. so I am saying anything in this talk that are science fictions.
Dialogue: 0,0:07:46.93,0:07:50.52,Default,,0,0,0,,and its MIT licensed, so its open and free.
Dialogue: 0,0:07:50.52,0:07:51.44,Default,,0,0,0,,so you can get it.
Dialogue: 0,0:07:51.88,0:07:54.10,Default,,0,0,0,,and there's more talk about this.
Dialogue: 0,0:07:55.02,0:08:01.92,Default,,0,0,0,,I am going to explain what we are trying to do with higher level terms with some examples
Dialogue: 0,0:08:02.17,0:08:04.88,Default,,0,0,0,,Herb Sutter is going to talk more about it.
Dialogue: 0,0:08:05.23,0:08:13.32,Default,,0,0,0,,Gabriel Dos Reis are going to talk how, er, ties into some of the work been done in the standard commitee for writting better code.
Dialogue: 0,0:08:13.32,0:08:21.84,Default,,0,0,0,,Neil Macintosh who wrote the tool that we work with, are going to talk about static analysis and some of the classes.
Dialogue: 0,0:08:21.95,0:08:23.12,Default,,0,0,0,,This is all this weak.
Dialogue: 0,0:08:23.83,0:08:29.08,Default,,0,0,0,,This is a problem with coding rules, with guide lines.
Dialogue: 0,0:08:29.33,0:08:30.44,Default,,0,0,0,,which is...
Dialogue: 0,0:08:30.45,0:08:32.65,Default,,0,0,0,,have you even seen one you really liked?
Dialogue: 0,0:08:32.92,0:08:37.18,Default,,0,0,0,,that might be necessary. but it's like medicine, doesn't taste good.
Dialogue: 0,0:08:37.77,0:08:39.63,Default,,0,0,0,,we all hate coding rules.
Dialogue: 0,0:08:39.79,0:08:44.83,Default,,0,0,0,,Usual caveats and thanks to the people who was made the less usual and paticular cases.
Dialogue: 0,0:08:44.92,0:08:46.31,Default,,0,0,0,,but basicly we don't like it.
Dialogue: 0,0:08:46.60,0:08:48.76,Default,,0,0,0,,and one of the reasons is that
Dialogue: 0,0:08:48.97,0:08:53.48,Default,,0,0,0,,coding guidelines tend to be written to prevent accident
Dialogue: 0,0:08:53.77,0:08:59.96,Default,,0,0,0,,so to keep novices that are not as smart as us from doing stupid things
Dialogue: 0,0:09:00.01,0:09:02.87,Default,,0,0,0,,so it's long lists of don't do this and don't do that.
Dialogue: 0,0:09:02.96,0:09:03.49,Default,,0,0,0,,and
Dialogue: 0,0:09:03.68,0:09:07.03,Default,,0,0,0,,I don't like such lists and I know most of you don't like neither.
Dialogue: 0,0:09:07.18,0:09:12.34,Default,,0,0,0,,and it's very often written at the start of an organization
Dialogue: 0,0:09:12.40,0:09:18.41,Default,,0,0,0,,when people is little bit uncertain about what they want to do and they want to avoid problems.
Dialogue: 0,0:09:18.41,0:09:21.54,Default,,0,0,0,,and rules tend to focus on low-level things
Dialogue: 0,0:09:21.54,0:09:22.99,Default,,0,0,0,,I mean, eh
Dialogue: 0,0:09:23.07,0:09:25.20,Default,,0,0,0,,do use camel case underscores
Dialogue: 0,0:09:25.20,0:09:27.90,Default,,0,0,0,,how many yea spaces to use to indent
Dialogue: 0,0:09:28.24,0:09:32.08,Default,,0,0,0,,these are all very interesting, could be in the essential for our organization
Dialogue: 0,0:09:32.15,0:09:37.34,Default,,0,0,0,,but it has nothing much to do with how you get quality software at the higher level.
Dialogue: 0,0:09:37.41,0:09:41.36,Default,,0,0,0,,how do you actually recognize a good piece of code when you came to see it?
Dialogue: 0,0:09:41.76,0:09:46.23,Default,,0,0,0,,a lot of them simply sets restrictions.
Dialogue: 0,0:09:47.44,0:09:55.96,Default,,0,0,0,,don't use overloading; don't use exceptions; don't use multiple-inheritance; don't use casts.... all kinds of rules like that
Dialogue: 0,0:09:56.11,0:10:04.36,Default,,0,0,0,,some are good. some are bad. some are good in some paticular environment. some are not.\nAnd really, there is lot of bad advice out there.
Dialogue: 0,0:10:04.61,0:10:09.77,Default,,0,0,0,,there are guidelines that tell you that you really should trying write java.
Dialogue: 0,0:10:09.84,0:10:12.90,Default,,0,0,0,,when if you want to write java and you how to do which?
Dialogue: 0,0:10:12.90,0:10:18.36,Default,,0,0,0,,don't try to stop c++ programmer from writting good c++.
Dialogue: 0,0:10:18.36,0:10:22.91,Default,,0,0,0,,And "C with classes"? It was really cool in 1986
Dialogue: 0,0:10:23.04,0:10:25.84,Default,,0,0,0,,that a long time ago. a lot of you weren't born then.
Dialogue: 0,0:10:25.84,0:10:36.41,Default,,0,0,0,,and there are people think that really the world came to an end in 1978 when K&R came out.
Dialogue: 0,0:10:36.41,0:10:42.09,Default,,0,0,0,,and they might accept a few things they got from c++ like function prototype and const
Dialogue: 0,0:10:42.09,0:10:46.50,Default,,0,0,0,,but basically you really should write code as if we do it in C.
Dialogue: 0,0:10:46.80,0:10:50.35,Default,,0,0,0,,really dumb idea in my opinion, but we'll get to that.
Dialogue: 0,0:10:50.35,0:10:53.87,Default,,0,0,0,,also, coding rules get outdated.
Dialogue: 0,0:10:53.87,0:11:08.32,Default,,0,0,0,,I saw a recent year recommendation to use a  coding guideline , a really good guidelines, it describe how to write good code in about 198s. it hasn't been updated, that's a long time ago.
Dialogue: 0,0:11:08.45,0:11:10.78,Default,,0,0,0,,and so they became a drag.
Dialogue: 0,0:11:10.78,0:11:23.66,Default,,0,0,0,,a lot of code are specialized for particular application areas like I helped to write a set of guidelines for hard-realtime softwares or flight controlls
Dialogue: 0,0:11:24.02,0:11:27.25,Default,,0,0,0,,these are very nice guidelines for that.
Dialogue: 0,0:11:27.25,0:11:30.21,Default,,0,0,0,,but then people try use it in some other areas.
Dialogue: 0,0:11:30.21,0:11:38.90,Default,,0,0,0,,and you know, one of the guide rules for flight is that you don't use "new" after you take off.
Dialogue: 0,0:11:38.90,0:11:41.04,Default,,0,0,0,,and you never use "delete"
Dialogue: 0,0:11:41.30,0:11:45.94,Default,,0,0,0,,maybe these are not the most appropriate guidelines elsewhere.
Dialogue: 0,0:11:46.19,0:11:51.40,Default,,0,0,0,,other guidelines have similar kind of bias and constraint, and people tend to forget them.
Dialogue: 0,0:11:51.78,0:11:55.37,Default,,0,0,0,,and a lot of them are very long winded.
Dialogue: 0,0:11:55.37,0:11:59.73,Default,,0,0,0,,you really need to be a language lawyer to understand them.
Dialogue: 0,0:11:59.73,0:12:04.41,Default,,0,0,0,,I looked at the rules for how to use pointers in c++
Dialogue: 0,0:12:04.41,0:12:10.36,Default,,0,0,0,,I mean, I was miserable, I couldn't understand all those rules.
Dialogue: 0,0:12:10.66,0:12:13.00,Default,,0,0,0,,and you can't follow them, really.
Dialogue: 0,0:12:13.00,0:12:18.81,Default,,0,0,0,,and a lot of guidelines don't have very good tools
Dialogue: 0,0:12:19.15,0:12:21.38,Default,,0,0,0,,and they have platform dependencies
Dialogue: 0,0:12:21.38,0:12:21.63,Default,,0,0,0,,{\pos(357,499)}da
Dialogue: 0,0:12:21.63,0:12:21.81,Default,,0,0,0,,{\pos(276,477)}da
Dialogue: 0,0:12:21.80,0:12:21.93,Default,,0,0,0,,{\pos(483,425)}da
Dialogue: 0,0:12:21.93,0:12:22.05,Default,,0,0,0,,{\pos(301,424)}da
Dialogue: 0,0:12:22.07,0:12:22.59,Default,,0,0,0,,{\pos(373,400)}da~
Dialogue: 0,0:12:22.77,0:12:24.50,Default,,0,0,0,,and the don't produce guidance.
Dialogue: 0,0:12:24.70,0:12:33.68,Default,,0,0,0,,I really like to emphasize that telling people what not to do is less helpfull than telling what to do.
Dialogue: 0,0:12:33.79,0:12:36.30,Default,,0,0,0,,so let's do those good guidelines
Dialogue: 0,0:12:36.30,0:12:40.49,Default,,0,0,0,,comprehensive, browserable, for modern c++, for the moment
Dialogue: 0,0:12:40.49,0:12:53.04,Default,,0,0,0,,first of all, let's ignore legacy code, let's ignore old stuff. let's write the rules for what we would like our code to look like in 5 to 10 years
Dialogue: 0,0:12:53.20,0:12:59.06,Default,,0,0,0,,and then we'll deal with how to do the transition, how to do with  in compatibility when we have to.
Dialogue: 0,0:13:00.36,0:13:03.16,Default,,0,0,0,,gradual adaption is essential.
Dialogue: 0,0:13:03.41,0:13:05.26,Default,,0,0,0,,prescriptive teachable
Dialogue: 0,0:13:05.29,0:13:11.46,Default,,0,0,0,,one of the things that hold c++ back is that there are really a lot of bad teaching materials out there.
Dialogue: 0,0:13:11.46,0:13:14.22,Default,,0,0,0,,some of it is very old, some of it is backwards-looking
Dialogue: 0,0:13:14.29,0:13:19.57,Default,,0,0,0,,some of it try to maximize the pill by domain it down
Dialogue: 0,0:13:19.57,0:13:21.03,Default,,0,0,0,,and things like that.
Dialogue: 0,0:13:21.18,0:13:26.34,Default,,0,0,0,,so a setup guidelines can also guide teachers to how to teaching.
Dialogue: 0,0:13:26.54,0:13:29.47,Default,,0,0,0,,Flexiable of course. Because the huge community.
Dialogue: 0,0:13:29.64,0:13:30.08,Default,,0,0,0,,I mean
Dialogue: 0,0:13:30.19,0:13:33.98,Default,,0,0,0,,we recover just about everything that's been done on computing
Dialogue: 0,0:13:34.12,0:13:36.07,Default,,0,0,0,,And of course Non-proprietary.
Dialogue: 0,0:13:36.07,0:13:39.68,Default,,0,0,0,,We couldn't possibly do this with limits.
Dialogue: 0,0:13:43.28,0:13:46.51,Default,,0,0,0,,There are some high level rules and there are some low-level rules.
Dialogue: 0,0:13:46.59,0:13:50.57,Default,,0,0,0,,the high-level rules are there to provide a conceptual framework for everything
Dialogue: 0,0:13:50.68,0:13:53.48,Default,,0,0,0,,that sort of philosophical on nature.
Dialogue: 0,0:13:53.60,0:13:54.79,Default,,0,0,0,,and they are very useful.
Dialogue: 0,0:13:54.79,0:14:00.43,Default,,0,0,0,,like, you have to expre4ss ideas in code - compilers don't read the comments.
Dialogue: 0,0:14:00.52,0:14:08.12,Default,,0,0,0,,and you use ISO standard c++, yes there are reasons to use extensions as such
Dialogue: 0,0:14:08.12,0:14:13.54,Default,,0,0,0,,but we are not going to deal with that, that will be for paticular restrictions
Dialogue: 0,0:14:13.72,0:14:16.36,Default,,0,0,0,,And we want static type safety
Dialogue: 0,0:14:17.10,0:14:18.14,Default,,0,0,0,,etc.etc
Dialogue: 0,0:14:18.32,0:14:21.17,Default,,0,0,0,,so there a philosophical framework here
Dialogue: 0,0:14:21.31,0:14:26.70,Default,,0,0,0,,the problem is that again compilers and programmers don't really get philosophy.
Dialogue: 0,0:14:26.90,0:14:35.84,Default,,0,0,0,, it means that you have to transfer into something that can be understood in detail in context of a piece of program and use.
Dialogue: 0,0:14:35.84,0:14:38.54,Default,,0,0,0,,so for that reason there is a whole bunch of low-level rules.
Dialogue: 0,0:14:38.79,0:14:43.65,Default,,0,0,0,,that basically you guys should threw the massive alternatives and features
Dialogue: 0,0:14:46.26,0:14:52.70,Default,,0,0,0,,the low-level rules, things like, use T* to designate a single object, not array.
Dialogue: 0,0:14:52.90,0:14:57.58,Default,,0,0,0,,and prefer initialization to assignment in constructors
Dialogue: 0,0:14:57.71,0:15:01.08,Default,,0,0,0,,these are easily checkable.
Dialogue: 0,0:15:01.08,0:15:04.18,Default,,0,0,0,,we have a tool that tells you when you violate it.
Dialogue: 0,0:15:04.24,0:15:06.00,Default,,0,0,0,,Always initialize an object
Dialogue: 0,0:15:06.04,0:15:11.96,Default,,0,0,0,,compilers these days do. but it's a good rule and we can do even better with external tools that we have them.
Dialogue: 0,0:15:12.01,0:15:15.29,Default,,0,0,0,,so basically that sort of shows the way through the world dominance
Dialogue: 0,0:15:15.66,0:15:22.27,Default,,0,0,0,,and the tools provide feedback for programers, it also helps unify styles.
Dialogue: 0,0:15:22.58,0:15:27.34,Default,,0,0,0,,if I look at a piece of code and I see a string,
Dialogue: 0,0:15:27.34,0:15:30.20,Default,,0,0,0,,if I know it's std::string, I know a lot.
Dialogue: 0,0:15:30.37,0:15:34.28,Default,,0,0,0,,and it helped me, and I don't have to go back and read the manual again.
Dialogue: 0,0:15:35.51,0:15:47.51,Default,,0,0,0,,so a more unify style helps getting code written quickly, helps me read the code, understand the code
Dialogue: 0,0:15:47.70,0:15:53.94,Default,,0,0,0,,and one thing you should understand is that the rules and not mean to be minimal or orthogonal.
Dialogue: 0,0:15:54.23,0:16:01.74,Default,,0,0,0,,text book writters spend a lot of time trying to make sure that fix minimal amount of paper.
Dialogue: 0,0:16:02.54,0:16:03.79,Default,,0,0,0,,this is not we are up to
Dialogue: 0,0:16:04.06,0:16:12.33,Default,,0,0,0,,we try to have the most helpful, and have a large set tool to tell you when you fall over the edge.
Dialogue: 0,0:16:12.88,0:16:16.58,Default,,0,0,0,,so the structure of a rule is simple and structured.
Dialogue: 0,0:16:18.24,0:16:21.46,Default,,0,0,0,,"No naked new" for instance, it's a rule.
Dialogue: 0,0:16:21.46,0:16:24.65,Default,,0,0,0,,and Reference numbers - people love reference numbers
Dialogue: 0,0:16:24.65,0:16:27.15,Default,,0,0,0,,It also means that you can search for them.
Dialogue: 0,0:16:27.26,0:16:31.62,Default,,0,0,0,,I mean you can refer to them in error messages. things like that.
Dialogue: 0,0:16:32.01,0:16:38.49,Default,,0,0,0,,and NEVER NEVER tell people what not to do without giving a reason or what to do without giving a reason
Dialogue: 0,0:16:38.53,0:16:44.15,Default,,0,0,0,,so every rule with the first thing that comes up with the rule itself is that rational a reason.
Dialogue: 0,0:16:44.50,0:16:46.32,Default,,0,0,0,,and then it comes with an example.
Dialogue: 0,0:16:46.40,0:16:53.05,Default,,0,0,0,,because by and large we don't understand abstract text, we need a concrete example or more
Dialogue: 0,0:16:53.38,0:16:57.70,Default,,0,0,0,,if it's a "don't do this" rule, there should be alternatives.
Dialogue: 0,0:16:57.81,0:17:01.12,Default,,0,0,0,,never tell people what not to do unless you give them alternatives.
Dialogue: 0,0:17:01.84,0:17:03.54,Default,,0,0,0,,fairly simple to say.
Dialogue: 0,0:17:03.79,0:17:05.64,Default,,0,0,0,,little bit hard to do sometimes.
Dialogue: 0,0:17:05.70,0:17:10.83,Default,,0,0,0,,these rules are variable and value for a long time.
Dialogue: 0,0:17:11.23,0:17:13.55,Default,,0,0,0,,There's references to other things.
Dialogue: 0,0:17:13.55,0:17:18.34,Default,,0,0,0,,There's notes, things that we just felt was useful to say
Dialogue: 0,0:17:18.44,0:17:26.99,Default,,0,0,0,,and then, there suppose to be long discussion at the end where you discuss a set of rules, set of reasons as such.
Dialogue: 0,0:17:27.12,0:17:28.84,Default,,0,0,0,,it's bit weak just now.
Dialogue: 0,0:17:28.91,0:17:30.62,Default,,0,0,0,,but that's the idea.
Dialogue: 0,0:17:30.73,0:17:40.05,Default,,0,0,0,,some time you need more. as an explanation,  that what fits on above this many lines, fit right on your screen when you look at them.
Dialogue: 0,0:17:40.30,0:17:42.53,Default,,0,0,0,,so that's structure.
Dialogue: 0,0:17:42.87,0:17:52.28,Default,,0,0,0,,the general idea is that people who have tryed to subset language have by and large failed.
Dialogue: 0,0:17:52.81,0:18:02.73,Default,,0,0,0,,the thing that you really want to get rid of, like bad uses of pointers, bad interactions between inheritance and arrays and things like that
Dialogue: 0,0:18:02.73,0:18:08.96,Default,,0,0,0,,if you just ban everything to get rid of problems, you can't write decent code anymore
Dialogue: 0,0:18:08.96,0:18:11.77,Default,,0,0,0,,Yes! I want to write high-level code!
Dialogue: 0,0:18:11.95,0:18:19.79,Default,,0,0,0,,But how do I do that? I do that by having libraries that allow me to write high-level code, and they implemented it using low-level code.
Dialogue: 0,0:18:19.79,0:18:24.22,Default,,0,0,0,,because otherwise you can't get the efficiency and portability out of that.
Dialogue: 0,0:18:24.22,0:18:27.55,Default,,0,0,0,,So, the general idea is not just the subset.
Dialogue: 0,0:18:27.55,0:18:30.20,Default,,0,0,0,,First, we provide a superset.
Dialogue: 0,0:18:30.20,0:18:33.52,Default,,0,0,0,,we have ISO standard C++
Dialogue: 0,0:18:33.60,0:18:38.99,Default,,0,0,0,,we have parts of the standard library that we recommend and that's you can use when you want to.
Dialogue: 0,0:18:39.18,0:18:52.81,Default,,0,0,0,,and we have something called the guidelines support libraries which is small set - small as less than 2 dozen little classes and really that smaill - that's added.
Dialogue: 0,0:18:53.04,0:18:54.76,Default,,0,0,0,,And that way, we can say:
Dialogue: 0,0:18:54.76,0:18:57.52,Default,,0,0,0,,the messy dangerous bits, don't use them.
Dialogue: 0,0:18:57.71,0:19:08.54,Default,,0,0,0,,we have provided abstractions that are elegent and efficient to allow you to not go there most of the time, for most people, all of the time.
Dialogue: 0,0:19:08.54,0:19:13.36,Default,,0,0,0,,once you build that superset - the language + libraries.
Dialogue: 0,0:19:13.52,0:19:17.04,Default,,0,0,0,,the you subset, and you can get rid of a lot of the crack.
Dialogue: 0,0:19:17.18,0:19:24.43,Default,,0,0,0,,this is not a brand new idea I wrote a paper about it sometime more than ten years ago.
Dialogue: 0,0:19:24.60,0:19:32.12,Default,,0,0,0,,so, really what we want is not neutered subset of c++ which is a lot of people that tryed.
Dialogue: 0,0:19:32.12,0:19:35.16,Default,,0,0,0,,we want c++ on steroids on the other hand.
Dialogue: 0,0:19:35.16,0:19:36.97,Default,,0,0,0,,so more of a good stuff.
Dialogue: 0,0:19:37.21,0:19:40.78,Default,,0,0,0,,so the rules rely on the libraries.
Dialogue: 0,0:19:40.88,0:19:43.52,Default,,0,0,0,,you can use any standard libraries of course.
Dialogue: 0,0:19:43.69,0:19:46.91,Default,,0,0,0,,but once we rely on it, things like
Dialogue: 0,0:19:46.91,0:19:50.84,Default,,0,0,0,,standart library class like vector or unique_ptr
Dialogue: 0,0:19:50.84,0:19:59.13,Default,,0,0,0,,and some guideline things array_view -  this is when you have a begining of a sequence and end
Dialogue: 0,0:20:01.08,0:20:05.42,Default,,0,0,0,,not_null - you can say that a pointer shouldn't be null
Dialogue: 0,0:20:05.42,0:20:06.36,Default,,0,0,0,,now get back to that
Dialogue: 0,0:20:06.49,0:20:10.64,Default,,0,0,0,,so there's rules for using the GSL
Dialogue: 0,0:20:10.64,0:20:13.53,Default,,0,0,0,,Never transfer ownership by raw pointer
Dialogue: 0,0:20:14.06,0:20:18.11,Default,,0,0,0,,the idea is if you see a T*, it points to an element.
Dialogue: 0,0:20:18.32,0:20:23.80,Default,,0,0,0,,you are not suppose to delete it, because it just points to an element, somebody ownes it. that's it.
Dialogue: 0,0:20:23.90,0:20:33.00,Default,,0,0,0,,and if you want to have something that can not ever be null and you still want a pointer, you can use not_null of that pointer type.
Dialogue: 0,0:20:33.00,0:20:36.94,Default,,0,0,0,,now, there's rules that encourage you to use higher level abstractions
Dialogue: 0,0:20:37.05,0:20:46.00,Default,,0,0,0,,but these here are choose to show how you can deal with traditional old style code and improve it : don't pass an array as a ingle pointer.
Dialogue: 0,0:20:46.22,0:20:51.29,Default,,0,0,0,,so basically, guess what this could do'
Dialogue: 0,0:20:51.69,0:20:58.28,Default,,0,0,0,,I don't actually think that we can do less than can say double our productivity
Dialogue: 0,0:20:58.28,0:21:03.82,Default,,0,0,0,,this is big claim but I think it can be done
Dialogue: 0,0:21:03.85,0:21:16.11,Default,,0,0,0,,look at a good programmer working on a modern codebase and looking at same programmer working on a 20year old codebase or 10 year old codebase
Dialogue: 0,0:21:16.27,0:21:22.56,Default,,0,0,0,,also look at a median kind of programmer
Dialogue: 0,0:21:22.56,0:21:25.32,Default,,0,0,0,,and see what it taks to become a greate programmer.
Dialogue: 0,0:21:25.37,0:21:27.23,Default,,0,0,0,,you need support you need time
Dialogue: 0,0:21:27.23,0:21:28.59,Default,,0,0,0,,we can lower that time
Dialogue: 0,0:21:28.84,0:21:37.87,Default,,0,0,0,,so, I think we can imitate experienced programers form rule sets that we trying to enforce.
Dialogue: 0,0:21:38.09,0:21:42.38,Default,,0,0,0,,and so we can eliminate huge classes of errors.
Dialogue: 0,0:21:42.38,0:21:45.08,Default,,0,0,0,,so simplification is important
Dialogue: 0,0:21:45.21,0:21:48.22,Default,,0,0,0,,if we can have simpler code, maintance improves.
Dialogue: 0,0:21:48.22,0:21:50.88,Default,,0,0,0,,consistent style speed up learning
Dialogue: 0,0:21:50.99,0:21:57.52,Default,,0,0,0,,and guide people away from the deep dark corners of the law so much
Dialogue: 0,0:21:58.88,0:22:06.70,Default,,0,0,0,,so much programers spend so much of their time looking on the most complicated code and the most complicated rules of the standard
Dialogue: 0,0:22:06.96,0:22:10.30,Default,,0,0,0,,I'm shaking my head, I mean, this hurts!
Dialogue: 0,0:22:10.49,0:22:11.96,Default,,0,0,0,,why do you do it ?!
Dialogue: 0,0:22:12.46,0:22:19.29,Default,,0,0,0,,so I'm emphasis on avoiding waste, that can improve importance
Dialogue: 0,0:22:19.42,0:22:30.12,Default,,0,0,0,,My guess is every large organization/community that's doing this will need to have some special rules for what they are doing
Dialogue: 0,0:22:30.27,0:22:33.13,Default,,0,0,0,,so I'm talking about what I called the "core guidelines"
Dialogue: 0,0:22:33.13,0:22:35.52,Default,,0,0,0,,things that pretentiously help everybody
Dialogue: 0,0:22:35.52,0:22:39.96,Default,,0,0,0,,And I think most of you will want extensions in places.
Dialogue: 0,0:22:40.09,0:22:53.04,Default,,0,0,0,,and some of you will want restructuring tool because there is some one recommended us that it doesn't quite fit in your world or maybe doesn't fit there for the next couple of years till you upgrade your codebase.
Dialogue: 0,0:22:53.04,0:22:55.31,Default,,0,0,0,,and don't compromise performance
Dialogue: 0,0:22:55.31,0:22:58.00,Default,,0,0,0,,performance is a really important aspect
Dialogue: 0,0:22:58.00,0:23:00.06,Default,,0,0,0,,so I don't think I've gone mad
Dialogue: 0,0:23:00.16,0:23:05.56,Default,,0,0,0,,I think we are actually attacking what we known to be the common most serious sources of errors
Dialogue: 0,0:23:05.56,0:23:09.02,Default,,0,0,0,,and get rid of errors
Dialogue: 0,0:23:10.25,0:23:15.44,Default,,0,0,0,,no resource leaks! that's good, we know how to do that!
Dialogue: 0,0:23:15.48,0:23:21.61,Default,,0,0,0,,eliminate dangling pointer - that suppose to be very hard. I'll show you how to do that
Dialogue: 0,0:23:21.90,0:23:28.48,Default,,0,0,0,,eliminate out-of-range access - that can not be done without a few runtime checks
Dialogue: 0,0:23:28.91,0:23:32.12,Default,,0,0,0,,a few!! if you just check everything you are deracinate
Dialogue: 0,0:23:32.12,0:23:37.53,Default,,0,0,0,,but a few can be done and we have some suggestions about that
Dialogue: 0,0:23:37.79,0:23:39.96,Default,,0,0,0,,and Tool support is essential
Dialogue: 0,0:23:39.96,0:23:43.88,Default,,0,0,0,,a lot of this, humans are not very actually good at it
Dialogue: 0,0:23:46.67,0:23:49.23,Default,,0,0,0,,you look at a million lines of code and your eyes glares over.
Dialogue: 0,0:23:49.45,0:23:57.36,Default,,0,0,0,,you check for a paticular kind of error and mistake in a million lines of code, 100 lines of code 10000 lines of code
Dialogue: 0,0:23:57.42,0:24:00.30,Default,,0,0,0,,you get very tired and your concentration wavers.
Dialogue: 0,0:24:00.38,0:24:01.40,Default,,0,0,0,,we neeeed tools
Dialogue: 0,0:24:02.14,0:24:05.71,Default,,0,0,0,,the support library helps by simplify the rules
Dialogue: 0,0:24:05.72,0:24:09.47,Default,,0,0,0,,and a lot of it has to do is reinforcing the type system.
Dialogue: 0,0:24:09.52,0:24:16.73,Default,,0,0,0,,we can do better than we did it in 1978 and 1985
Dialogue: 0,0:24:16.73,0:24:19.76,Default,,0,0,0,,so let's look at the core, the core rules.
Dialogue: 0,0:24:21.10,0:24:29.00,Default,,0,0,0,,we have to start somewhere, so gradual adaption will be the way most of us will go on.
Dialogue: 0,0:24:29.00,0:24:36.76,Default,,0,0,0,,if we write some brand new code from scratch, not using anybody else's libraries. then you can probably follow all the rules today.
Dialogue: 0,0:24:37.08,0:24:39.32,Default,,0,0,0,,that doesn't happen very often.
Dialogue: 0,0:24:39.52,0:24:42.46,Default,,0,0,0,,so I see gradual adaption be necessary.
Dialogue: 0,0:24:42.91,0:24:47.05,Default,,0,0,0,,and therefore core of the core rules
Dialogue: 0,0:24:47.08,0:24:52.09,Default,,0,0,0,,No leaks, No dangling pointers, No type violations through pointers at all!
Dialogue: 0,0:24:52.46,0:24:55.72,Default,,0,0,0,,we know how to avoid leaks.
Dialogue: 0,0:24:55.88,0:25:00.99,Default,,0,0,0,,we just root every object in a scope
Dialogue: 0,0:25:00.99,0:25:04.48,Default,,0,0,0,,RAII kind of standard containers
Dialogue: 0,0:25:04.48,0:25:09.60,Default,,0,0,0,,new and delete disappear into the abstractions
Dialogue: 0,0:25:09.60,0:25:14.49,Default,,0,0,0,,this is nice. when I see "delete" in application code, there must be bugs somewhere.
Dialogue: 0,0:25:15.04,0:25:15.69,Default,,0,0,0,,why?
Dialogue: 0,0:25:15.69,0:25:19.96,Default,,0,0,0,,because if there is one delete, there probably should be more.
Dialogue: 0,0:25:19.96,0:25:23.58,Default,,0,0,0,,and there are probably been too many.
Dialogue: 0,0:25:23.58,0:25:29.42,Default,,0,0,0,,so new/delete disappear into classes
Dialogue: 0,0:25:29.95,0:25:35.74,Default,,0,0,0,,when you see a "new" in application code, you think there must be a problem here.
Dialogue: 0,0:25:35.88,0:25:41.76,Default,,0,0,0,,because if there's a new there should be a delete somewhere, and if there's delete somewhere and we know from experience we made mistakes.
Dialogue: 0,0:25:42.11,0:25:44.48,Default,,0,0,0,,so we don't do that.
Dialogue: 0,0:25:44.62,0:25:48.76,Default,,0,0,0,,this leads us to what I think is a worse nightmare problem.
Dialogue: 0,0:25:49.60,0:25:50.99,Default,,0,0,0,,dangling pointers
Dialogue: 0,0:25:51.13,0:25:52.80,Default,,0,0,0,,and this are so easy to get to.
Dialogue: 0,0:25:52.86,0:25:58.73,Default,,0,0,0,,here we have a function "f" that you give it a pointer and it deletes.
Dialogue: 0,0:25:58.94,0:26:00.81,Default,,0,0,0,,so you deleted that pointer.
Dialogue: 0,0:26:02.04,0:26:04.24,Default,,0,0,0,,that might be right or might be wrong.
Dialogue: 0,0:26:04.51,0:26:08.76,Default,,0,0,0,,my rulers on it, it's very suspect because it is deleting application code.
Dialogue: 0,0:26:09.18,0:26:12.46,Default,,0,0,0,,here is "g" makes an object, calls f.
Dialogue: 0,0:26:12.76,0:26:20.62,Default,,0,0,0,,and then it uses q which happens to be the pointing the the object that was deleted in f.
Dialogue: 0,0:26:20.80,0:26:23.23,Default,,0,0,0,,this is how you scram your memory
Dialogue: 0,0:26:23.44,0:26:26.78,Default,,0,0,0,,the rules will make sure that you don't do this.
Dialogue: 0,0:26:26.88,0:26:31.65,Default,,0,0,0,,and it'll take care of some of the most shroud and difficult find bugs 
Dialogue: 0,0:26:32.18,0:26:39.16,Default,,0,0,0,,and we have to do this because if we don't we can damage type safety.
Dialogue: 0,0:26:39.33,0:26:41.54,Default,,0,0,0,,I say this object is an integer
Dialogue: 0,0:26:42.29,0:26:44.16,Default,,0,0,0,,you do this example
Dialogue: 0,0:26:44.29,0:26:49.33,Default,,0,0,0,,and the object might integer are laies at place where your object wasn't, you scramble it.
Dialogue: 0,0:26:49.76,0:26:52.14,Default,,0,0,0,,Memory safety of course.
Dialogue: 0,0:26:52.15,0:26:55.14,Default,,0,0,0,,because we are not using memory as if it is clear
Dialogue: 0,0:26:55.36,0:27:03.35,Default,,0,0,0,,and Resource safety is compromise because you can destory things that are laying around there.
Dialogue: 0,0:27:03.94,0:27:06.48,Default,,0,0,0,,double delete and no deletes
Dialogue: 0,0:27:06.54,0:27:13.33,Default,,0,0,0,,we have to solve this problem to get type safety to get resource safety.
Dialogue: 0,0:27:13.78,0:27:18.88,Default,,0,0,0,,we're going to eliminate this by combination of rules
Dialogue: 0,0:27:19.01,0:27:20.04,Default,,0,0,0,,I mean eliminated
Dialogue: 0,0:27:20.08,0:27:20.92,Default,,0,0,0,,get rid of it
Dialogue: 0,0:27:21.05,0:27:22.40,Default,,0,0,0,,
Dialogue: 0,0:27:22.87,0:27:26.26,Default,,0,0,0,,we distinguish owners from non-owners
Dialogue: 0,0:27:26.27,0:27:30.78,Default,,0,0,0,,if I have a pointer, am I suppose to delete it or not? NO!
Dialogue: 0,0:27:31.30,0:27:34.27,Default,,0,0,0,,asure raw pointers to be non-owners!
Dialogue: 0,0:27:34.27,0:27:45.28,Default,,0,0,0,,we have many pointers in our programs, far too many, but let's asure they are all innocent, they just point to an object, they are not suppose to be a ownership
Dialogue: 0,0:27:45.60,0:27:55.60,Default,,0,0,0,,Catch all attempts for a pointer to "escape" into a scope that is outside a scope of what it points to.
Dialogue: 0,0:27:55.62,0:27:57.13,Default,,0,0,0,,fairly simple
Dialogue: 0,0:27:57.39,0:28:01.32,Default,,0,0,0,,anything that holds an owner is consider an owner
Dialogue: 0,0:28:01.42,0:28:03.53,Default,,0,0,0,,so all of this works recursively
Dialogue: 0,0:28:03.69,0:28:05.89,Default,,0,0,0,,so this is simple rule.
Dialogue: 0,0:28:05.98,0:28:09.24,Default,,0,0,0,,we have some pointers, they point to an object
Dialogue: 0,0:28:10.32,0:28:13.36,Default,,0,0,0,,that object is held alive by an owner
Dialogue: 0,0:28:13.83,0:28:15.30,Default,,0,0,0,,this works recursively
Dialogue: 0,0:28:15.30,0:28:18.32,Default,,0,0,0,,the object happens to have an owner pointer inside it
Dialogue: 0,0:28:18.54,0:28:24.38,Default,,0,0,0,,thus we have constructors and distructors. constructors to construct, distructors to clean up.
Dialogue: 0,0:28:24.61,0:28:37.43,Default,,0,0,0,,what we really have to avoid is that pointer there. that has been passed below the object owner in the stack so when we delete the owner the object is not there and people are still refering to it.
Dialogue: 0,0:28:37.52,0:28:44.90,Default,,0,0,0,,this must never happen so we can asure that. so long long way to eliminate (dangling) pointers.
Dialogue: 0,0:28:45.03,0:28:46.42,Default,,0,0,0,,this is not new rule
Dialogue: 0,0:28:46.63,0:28:50.85,Default,,0,0,0,,if you look at the standard it suggest you should not do that because it's undefined behavior
Dialogue: 0,0:28:51.07,0:28:53.35,Default,,0,0,0,,the point is how do we actully get there.
Dialogue: 0,0:28:53.90,0:28:58.41,Default,,0,0,0,,so here is dangling pointers thing again
Dialogue: 0,0:28:58.99,0:29:01.83,Default,,0,0,0,,first of all the rule will catch the delete p.
Dialogue: 0,0:29:02.12,0:29:10.42,Default,,0,0,0,,you had a innocent looking pointer X* that is not an owner. so the rules will tell you not to do that.
Dialogue: 0,0:29:10.88,0:29:14.45,Default,,0,0,0,,tools that enforce the rules will tell you that is bad
Dialogue: 0,0:29:14.71,0:29:17.26,Default,,0,0,0,,you go back to the "g"
Dialogue: 0,0:29:17.58,0:29:22.35,Default,,0,0,0,,it says, well, "new X" obviously produces an owner.
Dialogue: 0,0:29:22.44,0:29:29.14,Default,,0,0,0,,so assigning it to a plain old pointer is going to be wrong.
Dialogue: 0,0:29:29.14,0:29:32.09,Default,,0,0,0,,because this could lead to a leak
Dialogue: 0,0:29:32.31,0:29:39.62,Default,,0,0,0,,if fact it is also .. if do that will lead you to problems with exceptions, is another matter.
Dialogue: 0,0:29:39.78,0:29:48.57,Default,,0,0,0,,we'll never get down to the problem because you are already been traped by those simple rules twice.
Dialogue: 0,0:29:49.64,0:29:56.73,Default,,0,0,0,,so we can look at how we represent the ownership.
Dialogue: 0,0:29:57.05,0:30:01.01,Default,,0,0,0,,you can pass a
